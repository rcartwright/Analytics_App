<!-- Step 1: Create the containing elements. -->
<div class="row">
<div class="col-md-12">
    <div id="embed-api-auth-container" class="text-center margin-bottom"></div>
  <div class="panel">
    <div class="panel-body">
  <div class="viewselector" id="view-selector-1-container"></div>
</div>
</div>
</div>
</div>


<div class="row">

	<div class="col-md-6">
    <div class="panel">
      <div class="panel-body">
      <div id="chart-1-container"></div>
    </div>
    </div>
  </div>

  <div class ="col-md-6">
    <div class="panel">
      <div class="panel-body">
    <div id="chart-2-container"></div>
  </div>
  </div>
  </div>

</div>

<div class="row">

  <div class="col-md-6">
    <div class="panel">
      <div class="panel-body">
      <div id="chart-3-container"></div>
    </div>
    </div>
  </div>

  <div class="col-md-6">
    <div class="panel">
      <div class="panel-body">
      <div id="chart-4-container"></div>
    </div>
    </div>
  </div>

</div>

<script>


(function(w,d,s,g,js,fjs){
  g=w.gapi||(w.gapi={});g.analytics={q:[],ready:function(cb){this.q.push(cb)}};
  js=d.createElement(s);fjs=d.getElementsByTagName(s)[0];
  js.src='https://apis.google.com/js/platform.js';
  fjs.parentNode.insertBefore(js,fjs);js.onload=function(){g.load('analytics')};
}(window,document,'script'));

gapi.analytics.ready(function() {

  // Step 3: Authorize the user.

  var CLIENT_ID = '<%= Figaro.env.CLIENT_ID -%>';

  gapi.analytics.auth.authorize({
    container: 'embed-api-auth-container',
    clientid: CLIENT_ID,
  });



gapi.analytics.auth.on('success', function(response) {
   if($('.panel').css('display', 'none')){
    $('.panel').css('display', 'inherit');
 }
});


  /**
   * Create a ViewSelector for the first view to be rendered inside of an
   * element with the id "view-selector-1-container".
   */
  var viewSelector = new gapi.analytics.ViewSelector({
    container: 'view-selector-1-container'
  });


  // Render both view selectors to the page.
  viewSelector.execute();



  /**
   * Create the first DataChart for top countries over the past 30 days.
   * It will be rendered inside an element with the id "chart-1-container".
   */
  var dataChart1 = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:browser',
      'start-date': '30daysAgo',
      'end-date': 'yesterday',
      'max-results': 6,
      sort: '-ga:sessions'
    },
    chart: {
      container: 'chart-1-container',
      type: 'PIE',
      options: {
        title: 'Browsers over the last 30 days.',
        width: '100%'
      }
    }
  });


  var dataChart2 = new gapi.analytics.googleCharts.DataChart({
    query: {
        metrics: 'ga:sessions',
        dimensions: 'ga:country',
      'start-date': '30daysAgo',
      'end-date': 'yesterday',
    },
    chart: {
      container: 'chart-2-container',
      type: 'GEO',
      options: {
        title: 'Sessions over the last 30 days.',
        width: '100%'
      }
    }
  });

  /**
   * Create the second DataChart for top countries over the past 30 days.
   * It will be rendered inside an element with the id "chart-2-container".
   */
  var dataChart3 = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:sessions',
      dimensions: 'ga:date',
      'start-date': '30daysAgo',
      'end-date': 'yesterday'
    },
    chart: {
      container: 'chart-3-container',
      type: 'LINE',
      options: {
        title: 'Sessions over the last 30 days.',
        width: '100%'
      }
    }
  });


    var dataChart4 = new gapi.analytics.googleCharts.DataChart({
    query: {
      metrics: 'ga:pageviews',
      dimensions: 'ga:pagePath',
      'start-date': '30daysAgo',
      'end-date': 'yesterday',
      'max-results': 7,
      sort: '-ga:pageviews'
    },
    chart: {
      container: 'chart-4-container',
      type: 'TABLE',
      options: {
        title: 'Sessions over the last 30 days.',
        width: '100%'
      }
    }
  });



  /**
   * Update the first dataChart when the first view selecter is changed.
   */
  viewSelector.on('change', function(ids) {
    dataChart1.set({query: {ids: ids}}).execute();
    dataChart2.set({query: {ids: ids}}).execute();
    dataChart3.set({query: {ids: ids}}).execute();
    dataChart4.set({query: {ids: ids}}).execute();
  });

});


</script>

